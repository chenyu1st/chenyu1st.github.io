<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql导入导出亿条数据（排坑篇）</title>
      <link href="/2020/04/28/mysql/mysql01/"/>
      <url>/2020/04/28/mysql/mysql01/</url>
      
        <content type="html"><![CDATA[<h1 id="今天和大家聊聊mysql导入导出亿条数据的方法"><a href="#今天和大家聊聊mysql导入导出亿条数据的方法" class="headerlink" title="今天和大家聊聊mysql导入导出亿条数据的方法"></a>今天和大家聊聊mysql导入导出亿条数据的方法</h1><h3 id="背景：公司业务需要给某个活动的支付宝用户发送模板消息"><a href="#背景：公司业务需要给某个活动的支付宝用户发送模板消息" class="headerlink" title="背景：公司业务需要给某个活动的支付宝用户发送模板消息"></a>背景：公司业务需要给某个活动的支付宝用户发送模板消息</h3><p>经调查发现，此次活动的用户数量大约2亿，为了模拟生产环境，领导让我把生产库的用户信息（脱敏）拉到开发库，让开发写好程序读取数据并推送消息。</p><h3 id="排坑1：Navicat"><a href="#排坑1：Navicat" class="headerlink" title="排坑1：Navicat"></a>排坑1：Navicat</h3><p>由于我对Mysql不是很了解，在数据同步前我事先问了下公司的DBA应该如何操作：使用navicat的数据传输功能。</p><h4 id="环境：Navicat-Premium-12"><a href="#环境：Navicat-Premium-12" class="headerlink" title="环境：Navicat Premium 12"></a>环境：Navicat Premium 12</h4><ul><li>操作：</li><li>1.点击工具列表的数据传输 </li><li>2.选择源数据库及目标数据库</li><li>3.选择表（默认全表）</li><li>4.点击开始<br><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/chenyu1st/chenyu-cdn@master/rugod.cn/Mysql/1/mysql01.jpg"  alt="mysql01.jpg"></li></ul><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/chenyu1st/chenyu-cdn@master/rugod.cn/Mysql/1/mysql02.jpg"  alt="mysql02.jpg"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/chenyu1st/chenyu-cdn@master/rugod.cn/Mysql/1/mysql03.jpg"  alt="mysql03.jpg"></p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>数据传输速度大约1分钟20w条数据，传完大概得8个多小时，我挂机了一段时间后再看进度发现数据传输到百分之11的时候失败了，报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Multi-statement transaction required more than ‘max_binlog_cache_size’ bytes of storage; increase this mysqld variable and try again</span><br></pre></td></tr></table></figure><p>百度之后发现<br>这是由于更新和删除的大事务会写入大量binlog，可能会造成binlog cache过小而导致执行失败。</p><p>具体解决方法为如下：</p><p>查看max_binlog_cache_size大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;max_binlog_cache_size&#39;;</span><br><span class="line">+-----------------------+-----------+</span><br><span class="line">| Variable_name         | Value     |</span><br><span class="line">+-----------------------+-----------+</span><br><span class="line">| max_binlog_cache_size | 134217728 |</span><br><span class="line">+-----------------------+-----------+</span><br></pre></td></tr></table></figure><p>查看该参数设置为134217728B，即128MB。</p><p>此参数可以动态修改，修改该参数为40GB。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global max_binlog_cache_size&#x3D;40*1024*1024*1024;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br></pre></td></tr></table></figure><p>为了防止数据库重启后还出现此问题，还需要在/etc/my.cnf里修改max_binlog_cache_size的值。</p><p>具体详情可参考下面两篇博客：<br><a href="https://www.cnblogs.com/gjc592/p/12774209.html" target="_blank" rel="noopener">https://www.cnblogs.com/gjc592/p/12774209.html</a><br><a href="https://blog.csdn.net/u014609263/article/details/90447809" target="_blank" rel="noopener">https://blog.csdn.net/u014609263/article/details/90447809</a></p><h3 id="排坑2：mysqldump"><a href="#排坑2：mysqldump" class="headerlink" title="排坑2：mysqldump"></a>排坑2：mysqldump</h3><p>由于用navicat传输速度实在过慢，听取DBA建议后直接采用mysqldump的方式。</p><p>基本用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">导出</span><br><span class="line">mysqldump -uxxx -pxx 库名   表名  &gt; bak.sql</span><br><span class="line">还原</span><br><span class="line">mysql -uxxx -pxxx 库名 &lt; bak.sql</span><br></pre></td></tr></table></figure><p>详情可以看mysql官方文档用法：</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqldump-sql-format.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/mysqldump-sql-format.html</a></p><p>导出完之后再还原到目标数据库后出现了和上个坑一样的问题：max_binlog_cache_size过小。</p><h3 id="排坑3：select-into-outfile"><a href="#排坑3：select-into-outfile" class="headerlink" title="排坑3：select into outfile"></a>排坑3：select into outfile</h3><p>在上述问题还没找到解决方法的时候继续百度发现了还有一种方法可以解决问题。</p><p>MySQL自带的导出语句：select into outfile语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM db --可以加where条件</span><br><span class="line">INTO OUTFILE &quot;&#x2F;data&#x2F;bak.txt&quot; --导出文件位置</span><br><span class="line">FIELDS TERMINATED BY &#39;,&#39; OPTIONALLY ENCLOSED BY &#39;&quot;&#39; -- 字段分割符和包含符</span><br><span class="line">LINES TERMINATED BY &#39;\n&#39;;--换行符</span><br></pre></td></tr></table></figure><p>但是在执行的时候出现报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br></pre></td></tr></table></figure><p>查看官方文档，secure_file_priv参数用于限制LOAD DATA, SELECT …OUTFILE, LOAD_FILE()传到哪个指定目录。</p><ul><li>secure_file_priv 为 null 时，表示限制mysqld不允许导入或导出。</li><li>secure_file_priv 为 /tmp 时，表示限制mysqld只能在/tmp目录中执行导入导出，其他目录不能执行。</li><li>secure_file_priv 没有值时，表示不限制mysqld在任意目录的导入导出。</li></ul><p>查看secure_file_priv命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;%secure_file_priv%&#39;;</span><br></pre></td></tr></table></figure><p>而且此参数不能直接修改，必须在/ete/my.cnf里添加（默认没有这个参数）并且重启mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secure_file_priv&#x3D;&#39;&#x2F;data&#39;</span><br></pre></td></tr></table></figure><p>然后执行完导出语句后发现又报错：文件权限不足，原因是data文件夹是root所有，而mysql导出到文件的执行者为mysql用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 &#x2F;data</span><br></pre></td></tr></table></figure><p>赋权后导出文件终于没问题了，然后再执行导入文件的的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load data infile &#39;&#x2F;data&#x2F;bak.txt&#39; --默认指定服务器文件夹</span><br><span class="line">ignore into table xx --允许重复记录插入</span><br><span class="line">fields terminated by &#39;,&#39;  --判断字段通过逗号标识来分隔开</span><br><span class="line">lines terminated by &#39;\n&#39;(CustID,DeviceNo,logintype);--通过换行标识来解析成为每一条数据和插入到我指定的字段</span><br></pre></td></tr></table></figure><p>在此特别感谢CSDN博主「布偶猫爸爸」，他的这博客给了我很大启发。<br><a href="https://blog.csdn.net/qq_21108311/java/article/details/82559119" target="_blank" rel="noopener">https://blog.csdn.net/qq_21108311/java/article/details/82559119</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2亿多条数据的文件29G，导出速度最快的还是mysqldump方法，但是导入最稳定的我认为还是select into outfile方法，因为容错高，mysqldump的文件就一句insert（29G<br>的数据），执行失败就浪费了太多时间，但是select into outfile即使执行失败也能插入执行成功的数据（要是一条都没插进去当我没说- -）不会太浪费时间。最后提醒大家，大数据量的传输千万不要用navicat，很容易假死。最后补一句：太依赖可视化界面的软件很难成长起来，以后我尽量进服务器敲命令。</p><p>任务总算完成了，花了不少时间，趁机补习了好多mysql的知识，对于上面的问题其实还有优化的思路，只不过没时间去实验了，如果有幸看到我的博客并且也出现了我遇到的问题可以尝试下我的想法。</p><ul><li>临时关闭binlog日志。</li><li>如果你的目标表数据为空，可以先删索引，再导入数据，最后再加上索引。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
